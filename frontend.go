package codenames

import (
	"html/template"
	"math/rand"
	"net/http"

	"path"
	"path/filepath"
	"strings"
)

type templateParameters struct {
	SelectedGameID      string
	AutogeneratedGameID string
	JSLibs              []string
	JSScripts           []string
	Stylesheets         []string
}

func (s *Server) handleIndex(rw http.ResponseWriter, req *http.Request) {

	dir, id := filepath.Split(req.URL.Path)
	if dir != "" && dir != "/" {
		http.NotFound(rw, req)
		return
	}

	autogeneratedID := ""
	for {
		autogeneratedID = strings.ToLower(s.gameIDWords[rand.Intn(len(s.gameIDWords))])
		if _, ok := s.games[autogeneratedID]; !ok {
			break
		}
	}

	tmpl, err := template.ParseFiles(path.Join("front/build", "index.html"))

	if err != nil {
		http.Error(rw, "error rendering", http.StatusInternalServerError)
	}

	data, err := s.NewViewData(id, autogeneratedID)
	if err != nil {
		http.Error(rw, err.Error(), http.StatusInternalServerError)
	}

	if err := tmpl.Execute(rw, data); err != nil {
		http.Error(rw, err.Error(), http.StatusInternalServerError)
	}

}
